{"meta":{"generator":"0.10.0","format":20,"date":1625755200933},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# Discord Moderator\r\n\r\n[![Downloads](https://img.shields.io/npm/dt/discord-moderator?style=for-the-badge)](https://www.npmjs.com/package/discord-moderator)\r\n[![Stable Build](https://img.shields.io/npm/v/discord-moderator?style=for-the-badge)](https://www.npmjs.com/package/discord-moderator)\r\n\r\n**Discord Moderator** - A simple module for adding moderation to Discord bot.\r\n\r\n## Installation\r\n\r\n**Please note: Node.js 14.0.0 or newer is required.<br>\r\nAll types in brackets mean the type of what the method or event returns.**\r\n\r\nInstall [discord-moderator](https://www.npmjs.com/package/discord-moderator)\r\n```JS\r\n$ npm install discord-moderator\r\n```\r\n\r\nInstall [quick.db](https://www.npmjs.com/package/quick.db)\r\n```JS\r\n$ npm install quick.db\r\n```\r\n\r\n## Features\r\n\r\n* Simple & easy to use üëç\r\n* Beginner friendly üòÑ\r\n* Minimalistic option constructor üîß\r\n* TypeScript Support üîë\r\n* Flexible and customizable üõ†Ô∏è\r\n* 100% Promise-based ‚öôÔ∏è\r\n\r\n## [Documentation](https://dm-docs.tk)\r\n\r\n## Getting Started\r\n\r\n```JS\r\nconst Discord = require('discord.js');\r\n\r\nconst client = new Discord.Client();\r\nconst Moderator = require('discord-moderator');\r\nconst moderator = new Moderator(client);\r\n\r\nclient.on('ready', () => {\r\n  console.log('Bot started!');\r\n})\r\n\r\nclient.login('YOUR_BOT_TOKEN_HERE'); //https://discord.com/developers/\r\n```\r\n\r\n## Module Constructor\r\n\r\n```JS\r\nconst moderator = new Moderator(client, {\r\n  muteManager: true,\r\n  warnManager: true,\r\n\r\n  muteConfig: {\r\n    tableName: 'mutes',\r\n    checkCountdown: '10s'\r\n  },\r\n\r\n  warnConfig: {\r\n    tableName: 'warns',\r\n    maxWarns: 3,\r\n    punishment: 'kick',\r\n    muteTime: '1d'\r\n  }\r\n});\r\n```\r\n\r\n* **options.muteManager**: Property responsible for the status of the muting manager.\r\n* **options.warnManager**: Property responsible for the status of the warning manager.\r\n\r\n* **options.muteConfig.tableName**: Property responsible for the name of the table for the mute manager.\r\n* **options.muteConfig.checkCountdown**: Property responsible for the checking interval of all mutes.\r\n\r\n* **options.warnConfig.tableName**: Property responsible for the name of the table for the warn manager.\r\n* **options.warnConfig.maxWarns** : Property responsible for the maximum number of warnings.\r\n* **options.warnConfig.punishment**: Property responsible for the method of punishing the user. Available: `tempmute`, `mute`, `kick`, `ban`.\r\n* **options.warnConfig.muteTime**: Property responsible for the mute time for the `tempmute` punishment method.\r\n\r\n# Module Events\r\n\r\n* `ready` - Emits when the Moderator is initialized\r\n```JS\r\nmoderator.on('ready', client => {\r\n  console.log('Discord Moderator ready!');\r\n});\r\n```\r\n\r\n* `addMute` - Emits when the user is given a mute\r\n```JS\r\nmoderator.on('addMute', data => {\r\n  const guild = client.guilds.cache.get(data.guildID);\r\n  const member = guild.members.cache.get(data.userID);\r\n\r\n  return console.log(`User ${member.user.tag} got a mute on server ${guild.name} for ${data.muteReason}!`);\r\n});\r\n```\r\n\r\n* `addWarn` - Emits when a warning is given to the user\r\n```JS\r\nmoderator.on('addWarn', data => {\r\n  const guild = client.guilds.cache.get(data.guildID);\r\n  const member = guild.members.cache.get(data.userID);\r\n\r\n  return console.log(`User ${member.user.tag} got a warn on server ${guild.name} for ${data.warnReason}!`);\r\n});\r\n```\r\n\r\n* `ban` - Emits when a user is banned from the server\r\n```JS\r\nmoderator.on('ban', data => {\r\n  const guild = client.guilds.cache.get(data.guildID);\r\n  const member = guild.members.cache.get(data.userID);\r\n\r\n  return console.log(`User ${member.user.tag} banned on server ${guild.name} for ${data.reason}!`);\r\n});\r\n```\r\n\r\n* `kick` - Emits when the user is kicked from the server\r\n```JS\r\nmoderator.on('kick', data => {\r\n  const guild = client.guilds.cache.get(data.guildID);\r\n  const member = guild.members.cache.get(data.userID);\r\n\r\n  return console.log(`User ${member.user.tag} kicked on server ${guild.name} for ${data.reason}!`);\r\n});\r\n```\r\n\r\n* `muteEnded` - Emits when the user's temporary mute ends\r\n```JS\r\nmoderator.on('muteEnded', data => {\r\n  const guild = client.guilds.cache.get(data.guildID);\r\n  const member = guild.members.cache.get(data.userID);\r\n\r\n  return console.log(`User ${member.user.tag} expired mute on server ${guild.name}!`);\r\n});\r\n```\r\n\r\n* `removeMute` - Emits when the user has removed a mute\r\n```JS\r\nmoderator.on('removeMute', data => {\r\n  const guild = client.guilds.cache.get(data.guildID);\r\n  const member = guild.members.cache.get(data.userID);\r\n\r\n  return console.log(`User ${member.user.tag} unmuted on server ${guild.name}!`);\r\n});\r\n```\r\n\r\n* `removeWarn` - Emits when warnings are taken from the user\r\n```JS\r\nmoderator.on('removeWarn', data => {\r\n  const guild = client.guilds.cache.get(data.guildID);\r\n  const member = guild.members.cache.get(data.userID);\r\n\r\n  return console.log(`User ${member.user.tag} unwarned on server ${guild.name}!`);\r\n});\r\n```\r\n\r\n## Bot Example\r\n\r\n```JS\r\nconst Discord = require('discord.js');\r\nconst Moderator = require('discord-moderator');\r\nconst client = new Discord.Client();\r\nconst prefix = '!';\r\n\r\nclient.moderator = new Moderator(client);\r\n\r\nclient.on('ready', () => {\r\n  console.log(`${client.user.tag} ready!`);\r\n});\r\n\r\nclient.on('message', async message => {\r\n  if(!message.content.startsWith(prefix)) return;\r\n\r\n  const messageArray = message.content.split(' ');\r\n  const command = messageArray[0];\r\n  const args = messageArray.slice(1);\r\n\r\n  if(command === `${prefix}mute`) {\r\n    if(!client.moderator.utils.checkMemberPermissions(['KICK_MEMBERS'], message.member)) return;\r\n\r\n    const member = message.mentions.members.last();\r\n    const roleID = '295193127333241854';\r\n    const reason = args.slice(1).join(' ');\r\n\r\n    client.moderator.mutes.add(member, message.channel, roleID, reason);\r\n  }\r\n\r\n  if(command === `${prefix}tempmute`) {\r\n    if(!client.moderator.utils.checkMemberPermissions(['KICK_MEMBERS'], message.member)) return;\r\n\r\n    const member = message.mentions.members.last();\r\n    const roleID = '295193127333241854';\r\n    const time = '1d';\r\n    const reason = args.slice(1).join(' ');\r\n\r\n    client.moderator.mutes.temp(member, message.channel, roleID, time, reason);\r\n  }\r\n\r\n  if(command === `${prefix}unmute`) {\r\n    if(!client.moderator.utils.checkMemberPermissions(['KICK_MEMBERS'], message.member)) return;\r\n\r\n    const member = message.mentions.members.last();\r\n\r\n    client.moderator.mutes.remove(member);\r\n  }\r\n});\r\n```\r\n\r\n# Useful Links\r\n\r\n* [Documentation](https://dm-docs.tk)\r\n* [npm](https://www.npmjs.com/package/discord-moderator)\r\n* [GitHub](https://github.com/xyligan-gp/discord-moderator)\r\n* [Examples](https://github.com/xyligan-gp/discord-moderator/blob/master/example/)\r\n* [Support Server](https://discord.gg/zzbkvCcu2r)\r\n\r\nIf you found a bug, please send it in Discord to ‚ô° x“Ø‚Ñì[Œπ]gŒ±Œ∑4Œµg ‚ô°#9457.<br>\r\nIf you have any questions or need help, join the [Support Server](https://discord.gg/zzbkvCcu2r).<br>\r\nModule Created by [xyligan](https://www.npmjs.com/~xyligan).\r\n\r\n<h1>Thanks for using Discord Moderator ‚ô•</h1>","path":"docs/general/welcome.md"},"faq":{"name":"FAQ","type":"md","content":"# Frequently Asked Questions\r\n\r\nThese questions are some of the most frequently asked.\r\n\r\n## How do I install a module and its dependencies correctly?\r\n* Install `discord-moderator` | Command: `npm install discord-moderator`\r\n* Install `quick.db` | Command: `npm install quick.db`\r\n\r\n## Why is the module throwing a `Missing Permissions!` & `Missing Access!` errors?\r\nThe `Missing Permissions!` & `Missing Access!` errors are caused by insufficient client rights to execute a specific method/action.\r\n\r\n## Why does the bot sometimes just crash?\r\nIf, when trying to perform any action, your bot received an error and crashed, we recommend that you review the error received and do your best to fix it. If all else fails, contact the module support server.","path":"docs/general/faq.md"},"examples":{"name":"Examples","type":"md","content":"# Examples for creating a bot\r\n\r\nThis is just the smallest part of what can be done. More examples can be found here: **[discord-moderator/examples](https://github.com/xyligan-gp/discord-moderator/tree/master/example)**\r\n\r\n## Client and module initialization\r\n```JS\r\nconst Discord = require('discord.js');\r\nconst client = new Discord.Client();\r\nconst Moderator = require('discord-moderator');\r\nconst moderator = new Moderator(client, {\r\n    muteManager: true,\r\n    warnManager: true,\r\n\r\n    muteConfig: {\r\n        tableName: 'mutes',\r\n        checkCountdown: '10s'\r\n    },\r\n\r\n    warnConfig: {\r\n        tableName: 'warns',\r\n        maxWarns: 3,\r\n        punishment: 'tempmute',\r\n        muteTime: '12h'\r\n    }\r\n});\r\n\r\nclient.on('ready', () => {\r\n    console.log(`${client.user.tag} ready!`);\r\n});\r\n\r\nclient.login('YOUR_BOT_TOKEN_HERE');\r\n```\r\n\r\n## Bot command initialization\r\n```JS\r\nclient.on('message', message => {\r\n    const messageArray = message.content.split(' ');\r\n    const command = messageArray[0];\r\n    const args = messageArray.slice(1);\r\n});\r\n```\r\n\r\n## Writing bot commands\r\n\r\n### Command `kick`\r\n```JS\r\nif(command === '!kick') {\r\n    if(!moderator.utils.checkMemberPermissions(['KICK_MEMBERS'], message.member)) return;\r\n\r\n    const member = message.mentions.members.last();\r\n    const reason = args.slice(1).join(' ');\r\n\r\n    moderator.punishments.kick(member, reason, message.author.id);\r\n}\r\n```\r\n\r\n### Command `ban`\r\n\r\n```JS\r\nif(command === '!ban') {\r\n    if(!moderator.utils.checkMemberPermissions(['KICK_MEMBERS'], message.member)) return;\r\n\r\n    const member = message.mentions.members.last();\r\n    const reason = args.slice(1).join(' ');\r\n\r\n    moderator.punishments.ban(member, reason, message.author.id);\r\n}\r\n```\r\n\r\n### Command `mute`\r\n\r\n```JS\r\nif(command === '!mute') {\r\n    if(!moderator.utils.checkMemberPermissions(['KICK_MEMBERS'], message.member)) return;\r\n\r\n    const member = message.mentions.members.last();\r\n    const roleID = '295193127333241854';\r\n    const reason = args.slice(1).join(' ');\r\n\r\n    moderator.mutes.add(member, message.channel, roleID, reason);\r\n}\r\n```\r\n\r\n### Command `tempmute`\r\n\r\n```JS\r\nif(command === '!tempmute') {\r\n    if(!moderator.utils.checkMemberPermissions(['KICK_MEMBERS'], message.member)) return;\r\n\r\n    const member = message.mentions.members.last();\r\n    const roleID = '295193127333241854';\r\n    const time = '1d';\r\n    const reason = args.slice(1).join(' ');\r\n\r\n    moderator.mutes.temp(member, message.channel, roleID, time, reason);\r\n}\r\n```\r\n\r\n### Command `unmute`\r\n\r\n```JS\r\nif(command === '!unmute') {\r\n    if(!moderator.utils.checkMemberPermissions(['KICK_MEMBERS'], message.member)) return;\r\n\r\n    const member = message.mentions.members.last();\r\n\r\n    moderator.mutes.remove(member);\r\n}\r\n```\r\n\r\n## Module events and work with them\r\n\r\n### Event `ready`\r\n\r\n```JS\r\nmoderator.on('ready', client => {\r\n    console.log('Discord Moderator ready!');\r\n});\r\n```\r\n\r\n### Event `addMute`\r\n\r\n```JS\r\nmoderator.on('addMute', data => {\r\n    const guild = client.guilds.cache.get(data.guildID);\r\n    const member = guild.members.cache.get(data.userID);\r\n\r\n    return console.log(`User ${member.user.tag} got a mute on server ${guild.name} for ${data.muteReason}!`);\r\n});\r\n```\r\n\r\n### Event `addWarn`\r\n\r\n```JS\r\nmoderator.on('addWarn', data => {\r\n    const guild = client.guilds.cache.get(data.guildID);\r\n    const member = guild.members.cache.get(data.userID);\r\n\r\n    return console.log(`User ${member.user.tag} got a warn on server ${guild.name} for ${data.warnReason}!`);\r\n});\r\n```\r\n\r\n### Event `ban`\r\n\r\n```JS\r\nmoderator.on('ban', data => {\r\n    const guild = client.guilds.cache.get(data.guildID);\r\n    const member = guild.members.cache.get(data.userID);\r\n\r\n    return console.log(`User ${member.user.tag} banned on server ${guild.name} for ${data.reason}!`);\r\n});\r\n```\r\n\r\n### Event `kick`\r\n\r\n```JS\r\nmoderator.on('kick', data => {\r\n    const guild = client.guilds.cache.get(data.guildID);\r\n    const member = guild.members.cache.get(data.userID);\r\n\r\n    return console.log(`User ${member.user.tag} kicked on server ${guild.name} for ${data.reason}!`);\r\n});\r\n```\r\n\r\n### Event `muteEnded`\r\n\r\n```JS\r\nmoderator.on('muteEnded', data => {\r\n    const guild = client.guilds.cache.get(data.guildID);\r\n    const member = guild.members.cache.get(data.userID);\r\n\r\n    return console.log(`User ${member.user.tag} expired mute on server ${guild.name}!`);\r\n});\r\n```\r\n\r\n### Event `removeMute`\r\n\r\n```JS\r\nmoderator.on('removeMute', data => {\r\n    const guild = client.guilds.cache.get(data.guildID);\r\n    const member = guild.members.cache.get(data.userID);\r\n\r\n    return console.log(`User ${member.user.tag} unmuted on server ${guild.name}!`);\r\n});\r\n```\r\n\r\n### Event `removeWarn`\r\n\r\n```JS\r\nmoderator.on('removeWarn', data => {\r\n    const guild = client.guilds.cache.get(data.guildID);\r\n    const member = guild.members.cache.get(data.userID);\r\n\r\n    return console.log(`User ${member.user.tag} unwarned on server ${guild.name}!`);\r\n});\r\n```","path":"docs/general/examples.md"},"changelog":{"name":"ChangeLog","type":"md","content":"# Module Changelog\r\n* ***Version 1.0.0***\r\n  * Release module\r\n* ***Version 1.0.1***\r\n  * Fixed some bugs and errors\r\n* ***Version 1.0.2***\r\n  * Completely updated mute system, rewrited module structure\r\n* ***Version 1.0.3***\r\n  * Added warning system\r\n  * Fix bugs and errors\r\n* ***Versions 1.0.4 - 1.0.6***\r\n  * Fix README.md\r\n  * Correcting errors\r\n* ***Version 1.1.0***\r\n  * The structure of the module has been completely rewritten\r\n  * Fix all bugs, errors and problems\r\n  * Added event: `muteEnded`\r\n  * Adding TypeScript support\r\n* ***Version 1.1.1***\r\n  * Updating the warning system\r\n  * Modifying the constructor of a module's options\r\n  * Added check for all constructor options\r\n  * Fix module typings\r\n  * Fix minor bugs\r\n  * Added methods: `kick()` & `ban()`\r\n  * Added events: `kick`, `ban`, `addWarn`, `removeWarn`, `addMute`, `removeMute`\r\n* ***Version 1.1.2***\r\n  * Code optimization\r\n  * Fix methods: `kick()` & `ban()`\r\n* ***Version 1.1.3*** \r\n  * Fix package.json\r\n* ***Version 1.1.5***\r\n  * The module structure has been completely rewritten on managers\r\n  * Added module work with roles\r\n  * Completely rewritten `README.md`\r\n  * Rewritten TypeScript code\r\n  * Correction of bugs and errors\r\n  * Added event: `ready`","path":"docs/general/changelog.md"}}}},"classes":[{"name":"Emitter","description":"Moderator EventEmitter","access":"private","methods":[{"name":"on","params":[{"name":"eventName","description":"Event Name","type":[[["String"]]]},{"name":"fn","description":"Callback","type":[[["function"]]]}],"meta":{"line":13,"file":"Emitter.js","path":"src"}},{"name":"once","params":[{"name":"eventName","description":"Event Name","type":[[["String"]]]},{"name":"fn","description":"Callback","type":[[["function"]]]}],"meta":{"line":20,"file":"Emitter.js","path":"src"}},{"name":"emit","params":[{"name":"eventName","description":"Event Name","type":[[["String"]]]},{"name":"fn","description":"Callback","type":[[["function"]]]}],"meta":{"line":28,"file":"Emitter.js","path":"src"}}],"meta":{"line":8,"file":"Emitter.js","path":"src"}},{"name":"Moderator","construct":{"name":"Moderator","params":[{"name":"client","description":"Discord Client","type":[[["Client"]]]},{"name":"options","description":"Moderator Options","type":[[["Object"]]]},{"name":"options.muteManager","description":"MuteManager Status","type":[[["Boolean"]]]},{"name":"options.warnManager","description":"WarnManager Status","type":[[["Boolean"]]]},{"name":"options.muteConfig","description":"MuteManager Configuration","type":[[["Object"]]]},{"name":"options.muteConfig.tableName","description":"Table Name For MuteManager","type":[[["String"]]]},{"name":"options.muteConfig.checkCountdown","description":"Mutes Check Interval","type":[[["Number"]]]},{"name":"options.warnConfig","description":"WarnManager Configuration","type":[[["Object"]]]},{"name":"options.warnConfig.tableName","description":"Table Name For WarnManager","type":[[["String"]]]},{"name":"options.warnConfig.maxWarns","description":"Maximum number of warns for punishment","type":[[["Number"]]]},{"name":"options.warnConfig.punishment","description":"User punishment type","type":[[["String"]]]},{"name":"options.warnConfig.muteTime","description":"Mute time when reaching the warnings limit","type":[[["String"]]]}]},"props":[{"name":"utils","description":"Moderator Utils Manager","type":[[["UtilsManager"]]],"meta":{"line":38,"file":"Moderator.js","path":"src"}},{"name":"options","description":"Moderator Options","type":[[["Object"]]],"meta":{"line":45,"file":"Moderator.js","path":"src"}},{"name":"ready","description":"Moderator Ready Status","type":[[["Boolean"]]],"meta":{"line":51,"file":"Moderator.js","path":"src"}},{"name":"version","description":"Moderator Version","type":[[["String"]]],"meta":{"line":57,"file":"Moderator.js","path":"src"}},{"name":"author","description":"Moderator Author","type":[[["String"]]],"meta":{"line":63,"file":"Moderator.js","path":"src"}},{"name":"warns","description":"Moderator Warn Manager","type":[[["WarnManager"]]],"meta":{"line":69,"file":"Moderator.js","path":"src"}},{"name":"punishments","description":"Moderator Punishments Maganer","type":[[["PunishmentManager"]]],"meta":{"line":75,"file":"Moderator.js","path":"src"}},{"name":"mutes","description":"Moderator Mute Manager","type":[[["MuteManager"]]],"meta":{"line":81,"file":"Moderator.js","path":"src"}},{"name":"roles","description":"Moderator Roles Manager","type":[[["RolesManager"]]],"meta":{"line":87,"file":"Moderator.js","path":"src"}},{"name":"managers","description":"Moderator Managers","type":[[["Array","<"],["String",">"]]],"meta":{"line":93,"file":"Moderator.js","path":"src"}},{"name":"size","description":"Moderator Managers Count","type":[[["Number"]]],"meta":{"line":99,"file":"Moderator.js","path":"src"}}],"methods":[{"name":"initModerator","description":"Method for initialization module","access":"private","returns":[[["void"]]],"meta":{"line":156,"file":"Moderator.js","path":"src"}}],"events":[{"name":"ready","description":"Emits when the Moderator is initialized","params":[{"name":"callback","description":"Callback","type":[[["Client"]]]}],"meta":{"line":162,"file":"Moderator.js","path":"src"}},{"name":"kick","description":"Emits when the user is kicked from the server","params":[{"name":"callback","description":"Callback","type":[[["Object"]]]},{"name":"callback.userID","description":"User ID","type":[[["String"]]]},{"name":"callback.guildID","description":"Guild ID","type":[[["String"]]]},{"name":"callback.reason","description":"Kicking Reason","type":[[["String"]]]},{"name":"callback.authorID","description":"Kick Author ID","type":[[["String"]]]}],"meta":{"line":168,"file":"Moderator.js","path":"src"}},{"name":"ban","description":"Emits when a user is banned from the server","params":[{"name":"callback","description":"Callback","type":[[["Object"]]]},{"name":"callback.userID","description":"User ID","type":[[["String"]]]},{"name":"callback.guildID","description":"Guild ID","type":[[["String"]]]},{"name":"callback.reason","description":"Banning Reason","type":[[["String"]]]},{"name":"callback.authorID","description":"Ban Author ID","type":[[["String"]]]}],"meta":{"line":178,"file":"Moderator.js","path":"src"}},{"name":"addWarn","description":"Emits when a warning is given to the user","params":[{"name":"callback","description":"Callback","type":[[["Object"]]]},{"name":"callback.guildID","description":"Guild ID","type":[[["String"]]]},{"name":"callback.userID","description":"User ID","type":[[["String"]]]},{"name":"callback.channelID","description":"Channel ID","type":[[["String"]]]},{"name":"callback.nowTime","description":"Current Time","type":[[["Number"]]]},{"name":"callback.warnNumber","description":"Warn Index","type":[[["Number"]]]},{"name":"callback.warnReason","description":"Warning Reason","type":[[["String"]]]},{"name":"callback.warnBy","description":"Warn By User","type":[[["String"]]]}],"meta":{"line":188,"file":"Moderator.js","path":"src"}},{"name":"removeWarn","description":"Emits when warnings are taken from the user","params":[{"name":"callback","description":"Callback","type":[[["Object"]]]},{"name":"callback.guildID","description":"Guild ID","type":[[["String"]]]},{"name":"callback.userID","description":"User ID","type":[[["String"]]]},{"name":"callback.warns","description":"User Warns Count","type":[[["Number"]]]},{"name":"callback.data","description":"User Warns Array","type":[[["Array","<"],["Object",">"]]]}],"meta":{"line":201,"file":"Moderator.js","path":"src"}},{"name":"addMute","description":"Emits when the user is given a mute","params":[{"name":"callback","description":"Callback","type":[[["Object"]]]},{"name":"callback.guildID","description":"Guild ID","type":[[["String"]]]},{"name":"callback.userID","description":"User ID","type":[[["String"]]]},{"name":"callback.channelID","description":"Channel ID","type":[[["String"]]]},{"name":"callback.muteRoleID","description":"Mute Role ID","type":[[["String"]]]},{"name":"callback.muteTime","description":"Muting Time","type":[[["Number"]]]},{"name":"callback.nowTime","description":"Current Time","type":[[["Number"]]]},{"name":"callback.muteReason","description":"Muting Reason","type":[[["String"]]]}],"meta":{"line":211,"file":"Moderator.js","path":"src"}},{"name":"removeMute","description":"Emits when the user has removed a mute","params":[{"name":"callback","description":"Callback","type":[[["Object"]]]},{"name":"callback.userID","description":"User ID","type":[[["String"]]]},{"name":"callback.guildID","description":"Guild ID","type":[[["String"]]]}],"meta":{"line":224,"file":"Moderator.js","path":"src"}},{"name":"muteEnded","description":"Emits when the user's temporary mute ends","params":[{"name":"callback","description":"Callback","type":[[["Object"]]]},{"name":"callback.guildID","description":"Guild ID","type":[[["String"]]]},{"name":"callback.userID","description":"User ID","type":[[["String"]]]},{"name":"callback.channelID","description":"Channel ID","type":[[["String"]]]},{"name":"callback.muteRoleID","description":"Mute Role ID","type":[[["String"]]]},{"name":"callback.muteTime","description":"Muting Time","type":[[["Number"]]]},{"name":"callback.nowTime","description":"Current Time","type":[[["Number"]]]},{"name":"callback.muteReason","description":"Muting Reason","type":[[["String"]]]}],"meta":{"line":232,"file":"Moderator.js","path":"src"}}],"meta":{"line":28,"file":"Moderator.js","path":"src"}},{"name":"ModeratorError","construct":{"name":"ModeratorError","params":[{"name":"message","description":"Error Message","type":[[["String"]]]}]},"meta":{"line":5,"file":"ModeratorError.js","path":"src"}},{"name":"MuteManager","construct":{"name":"MuteManager","params":[{"name":"client","description":"Discord Client","type":[[["Client"]]]},{"name":"options","description":"Moderator Options","type":[[["Object"]]]},{"name":"options.muteManager","description":"MuteManager Status","type":[[["Boolean"]]]},{"name":"options.warnManager","description":"WarnManager Status","type":[[["Boolean"]]]},{"name":"options.muteConfig","description":"MuteManager Configuration","type":[[["Object"]]]},{"name":"options.muteConfig.tableName","description":"Table Name For MuteManager","type":[[["String"]]]},{"name":"options.muteConfig.checkCountdown","description":"Mutes Check Interval","type":[[["Number"]]]},{"name":"options.warnConfig","description":"WarnManager Configuration","type":[[["Object"]]]},{"name":"options.warnConfig.tableName","description":"Table Name For WarnManager","type":[[["String"]]]},{"name":"options.warnConfig.maxWarns","description":"Maximum number of warns for punishment","type":[[["Number"]]]},{"name":"options.warnConfig.punishment","description":"User punishment type","type":[[["String"]]]},{"name":"options.warnConfig.muteTime","description":"Mute time when reaching the warnings limit","type":[[["String"]]]}]},"props":[{"name":"methods","description":"Manager Methods","type":[[["Array","<"],["String",">"]]],"meta":{"line":36,"file":"MuteManager.js","path":"src/managers"}},{"name":"size","description":"Manager Methods Count","type":[[["Number"]]],"meta":{"line":42,"file":"MuteManager.js","path":"src/managers"}}],"methods":[{"name":"add","description":"Method for issuing a mute to a user","params":[{"name":"member","description":"Guild Member","type":[[["GuildMember"]]]},{"name":"channel","description":"Guild Channe;","type":[[["TextChannel"]]]},{"name":"muteRoleID","description":"Mute Role ID","type":[[["String"]]]},{"name":"muteReason","description":"Muting Reason","type":[[["String"]]]}],"returns":{"types":[[["Promise","<{"],["status",": "],["Boolean",", "],["data",": "],["Object","}>"]]],"description":"Returns the mute status and information about it"},"meta":{"line":75,"file":"MuteManager.js","path":"src/managers"}},{"name":"temp","description":"Method for issuing a tempmute to a user","params":[{"name":"member","description":"Guild Member","type":[[["GuildMember"]]]},{"name":"channel","description":"Guild Channel","type":[[["TextChannel"]]]},{"name":"muteRoleID","description":"Mute Role ID","type":[[["String"]]]},{"name":"muteTime","description":"Muting Time","type":[[["String"]]]},{"name":"muteReason","description":"Muting Reason","type":[[["String"]]]}],"returns":{"types":[[["Promise","<{"],["status",": "],["Boolean",", "],["data",": "],["Object","}>"]]],"description":"Returns the status of issuing a temporary mute and information about it"},"meta":{"line":137,"file":"MuteManager.js","path":"src/managers"}},{"name":"get","description":"Method for getting information about a user mute on the server","params":[{"name":"member","description":"Guild Member","type":[[["GuildMember"]]]}],"returns":{"types":[[["Promise","<{"],["status",": "],["Boolean",", "],["searchGuild",": "],["Boolean",", "],["searchUser",": "],["Boolean",", "],["data",": "],["Object","}>"]]],"description":"Returns search status and mute information"},"meta":{"line":198,"file":"MuteManager.js","path":"src/managers"}},{"name":"getAll","description":"Method for getting user mutes on all bot servers","params":[{"name":"member","description":"Guild Member","type":[[["GuildMember"]]]}],"returns":{"types":[[["Promise","<{"],["status",": "],["Boolean",", "],["searchUser",": "],["Boolean",", "],["data",": "],["Array","<"],["Object",">}>"]]],"description":"Returns the search status of the user and all his mutes on the bot servers"},"meta":{"line":222,"file":"MuteManager.js","path":"src/managers"}},{"name":"remove","description":"Method for removing the mute to the user","params":[{"name":"member","description":"Guild Member","type":[[["GuildMember"]]]}],"returns":{"types":[[["Promise","<{"],["status",": "],["Boolean","}>"]]],"description":"Returns the status of removing a mutate from a user"},"meta":{"line":243,"file":"MuteManager.js","path":"src/managers"}},{"name":"clearGuild","description":"Method for removing mutes from a specific server","params":[{"name":"guild","description":"Discord Guild","type":[[["Guild"]]]}],"returns":{"types":[[["Boolean"]]],"description":"Removing Status"},"meta":{"line":282,"file":"MuteManager.js","path":"src/managers"}},{"name":"clearAll","description":"Method for removing all mutes from the database","returns":{"types":[[["Boolean"]]],"description":"Removing Status"},"meta":{"line":301,"file":"MuteManager.js","path":"src/managers"}}],"meta":{"line":25,"file":"MuteManager.js","path":"src/managers"}},{"name":"PunishmentManager","construct":{"name":"PunishmentManager","params":[{"name":"client","description":"Discord Client","type":[[["Client"]]]},{"name":"options","description":"Moderator Options","type":[[["Object"]]]},{"name":"options.muteManager","description":"MuteManager Status","type":[[["Boolean"]]]},{"name":"options.warnManager","description":"WarnManager Status","type":[[["Boolean"]]]},{"name":"options.muteConfig","description":"MuteManager Configuration","type":[[["Object"]]]},{"name":"options.muteConfig.tableName","description":"Table Name For MuteManager","type":[[["String"]]]},{"name":"options.muteConfig.checkCountdown","description":"Mutes Check Interval","type":[[["Number"]]]},{"name":"options.warnConfig","description":"WarnManager Configuration","type":[[["Object"]]]},{"name":"options.warnConfig.tableName","description":"Table Name For WarnManager","type":[[["String"]]]},{"name":"options.warnConfig.maxWarns","description":"Maximum number of warns for punishment","type":[[["Number"]]]},{"name":"options.warnConfig.punishment","description":"User punishment type","type":[[["String"]]]},{"name":"options.warnConfig.muteTime","description":"Mute time when reaching the warnings limit","type":[[["String"]]]}]},"props":[{"name":"methods","description":"Manager Methods","type":[[["Array","<"],["String",">"]]],"meta":{"line":37,"file":"PunishmentManager.js","path":"src/managers"}},{"name":"size","description":"Manager Methods Count","type":[[["Number"]]],"meta":{"line":43,"file":"PunishmentManager.js","path":"src/managers"}}],"methods":[{"name":"kick","description":"Method for kicking users","params":[{"name":"member","description":"Guild Member","type":[[["GuildMember"]]]},{"name":"reason","description":"Kicking Reason","type":[[["String"]]]},{"name":"authorID","description":"Kick Author ID","type":[[["String"]]]}],"returns":{"types":[[["Promise","<{"],["status",": "],["Boolean",", "],["data",": {"],["userID",": "],["String",", "],["guildID",": "],["String",", "],["reason",": "],["String",", "],["authorID",": "],["String","}}>"]]],"description":"Returns kick status, reason and more"},"meta":{"line":53,"file":"PunishmentManager.js","path":"src/managers"}},{"name":"ban","description":"Method for banning users","params":[{"name":"member","description":"Guild Member","type":[[["GuildMember"]]]},{"name":"reason","description":"Banning Reason","type":[[["String"]]]},{"name":"authorID","description":"Ban Author ID","type":[[["String"]]]}],"returns":{"types":[[["Promise","<{"],["status",": "],["Boolean",", "],["data",": {"],["userID",": "],["String",", "],["guildID",": "],["String",", "],["reason",": "],["String",", "],["authorID",": "],["String","}}>"]]],"description":"Returns ban status, reason and more"},"meta":{"line":81,"file":"PunishmentManager.js","path":"src/managers"}},{"name":"punish","description":"Method for punishment users","params":[{"name":"member","description":"Guild Member","type":[[["GuildMember"]]]},{"name":"channel","description":"Guild Channel","type":[[["TextChannel"]]]},{"name":"muteRoleID","description":"Mute Role ID","type":[[["String"]]]},{"name":"authorID","description":"Author ID","type":[[["String"]]]}],"returns":{"types":[[["Promise","<{"],["status",": "],["Boolean",", "],["data",": {"],["punishType",": "],["String",", "],["userID",": "],["String",", "],["reason",": "],["String","}}>"]]],"description":"Returns the status of the punishment, its type, reason, and more"},"meta":{"line":110,"file":"PunishmentManager.js","path":"src/managers"}}],"meta":{"line":25,"file":"PunishmentManager.js","path":"src/managers"}},{"name":"RolesManager","construct":{"name":"RolesManager","params":[{"name":"client","description":"Discord Client","type":[[["Client"]]]},{"name":"options","description":"Moderator Options","type":[[["Object"]]]},{"name":"options.muteManager","description":"MuteManager Status","type":[[["Boolean"]]]},{"name":"options.warnManager","description":"WarnManager Status","type":[[["Boolean"]]]},{"name":"options.muteConfig","description":"MuteManager Configuration","type":[[["Object"]]]},{"name":"options.muteConfig.tableName","description":"Table Name For MuteManager","type":[[["String"]]]},{"name":"options.muteConfig.checkCountdown","description":"Mutes Check Interval","type":[[["Number"]]]},{"name":"options.warnConfig","description":"WarnManager Configuration","type":[[["Object"]]]},{"name":"options.warnConfig.tableName","description":"Table Name For WarnManager","type":[[["String"]]]},{"name":"options.warnConfig.maxWarns","description":"Maximum number of warns for punishment","type":[[["Number"]]]},{"name":"options.warnConfig.punishment","description":"User punishment type","type":[[["String"]]]},{"name":"options.warnConfig.muteTime","description":"Mute time when reaching the warnings limit","type":[[["String"]]]}]},"props":[{"name":"methods","description":"Manager Methods","type":[[["Array","<"],["String",">"]]],"meta":{"line":29,"file":"RolesManager.js","path":"src/managers"}},{"name":"size","description":"Manager Methods Count","type":[[["Number"]]],"meta":{"line":35,"file":"RolesManager.js","path":"src/managers"}}],"methods":[{"name":"add","description":"Method for adding roles to server users","params":[{"name":"member","description":"Guild Member","type":[[["GuildMember"]]]},{"name":"role","description":"Guild Role or Role Name","type":[[["Role"]],[["String"]]]}],"returns":[[["void"]]],"meta":{"line":46,"file":"RolesManager.js","path":"src/managers"}},{"name":"get","description":"Method for getting information about the server role","params":[{"name":"guild","description":"Discord Guild","type":[[["Guild"]]]},{"name":"role","description":"Guild Role or Role Name","type":[[["Role"]],[["String"]]]}],"returns":{"types":[[["Promise","<{"],["status",": "],["Boolean",", "],["role",": "],["Role","}>"]]],"description":"Returns information about the server role"},"meta":{"line":71,"file":"RolesManager.js","path":"src/managers"}},{"name":"getAll","description":"Method to get a collection of all server roles","params":[{"name":"guild","description":"Discord Guild","type":[[["Guild"]]]}],"returns":{"types":[[["Collection","<"],["String",", "],["Role",">"]]],"description":"Returns the collection of server roles"},"meta":{"line":100,"file":"RolesManager.js","path":"src/managers"}},{"name":"remove","description":"Method for removing roles from server users","params":[{"name":"member","description":"Guild Member","type":[[["GuildMember"]]]},{"name":"role","description":"Guild Role","type":[[["Role"]],[["String"]]]}],"returns":[[["void"]]],"meta":{"line":112,"file":"RolesManager.js","path":"src/managers"}}],"meta":{"line":21,"file":"RolesManager.js","path":"src/managers"}},{"name":"UtilsManager","construct":{"name":"UtilsManager","params":[{"name":"client","description":"Discord Client","type":[[["Client"]]]},{"name":"options","description":"Moderator Options","type":[[["Object"]]]},{"name":"options.muteManager","description":"MuteManager Status","type":[[["Boolean"]]]},{"name":"options.warnManager","description":"WarnManager Status","type":[[["Boolean"]]]},{"name":"options.muteConfig","description":"MuteManager Configuration","type":[[["Object"]]]},{"name":"options.muteConfig.tableName","description":"Table Name For MuteManager","type":[[["String"]]]},{"name":"options.muteConfig.checkCountdown","description":"Mutes Check Interval","type":[[["Number"]]]},{"name":"options.warnConfig","description":"WarnManager Configuration","type":[[["Object"]]]},{"name":"options.warnConfig.tableName","description":"Table Name For WarnManager","type":[[["String"]]]},{"name":"options.warnConfig.maxWarns","description":"Maximum number of warns for punishment","type":[[["Number"]]]},{"name":"options.warnConfig.punishment","description":"User punishment type","type":[[["String"]]]},{"name":"options.warnConfig.muteTime","description":"Mute time when reaching the warnings limit","type":[[["String"]]]}]},"props":[{"name":"methods","description":"Methods Array","type":[[["Array","<"],["String",">"]]],"meta":{"line":28,"file":"UtilsManager.js","path":"src/managers"}},{"name":"size","description":"Methods Count","type":[[["Number"]]],"meta":{"line":34,"file":"UtilsManager.js","path":"src/managers"}}],"methods":[{"name":"checkOptions","description":"Method for check Moderator Options","returns":{"types":[[["Object"]]],"description":"Correct Moderator Options"},"meta":{"line":41,"file":"UtilsManager.js","path":"src/managers"}},{"name":"checkClientPermissions","description":"Method for checking client permissions on the server","params":[{"name":"permissionsArray","description":"Array with permissions to check","type":[[["Array","<"],["String",">"]]]},{"name":"guild","description":"Discord Guild","type":[[["Guild"]]]}],"returns":{"types":[[["Boolean"]]],"description":"Boolean value that will indicate the presence/absence of permissions"},"meta":{"line":97,"file":"UtilsManager.js","path":"src/managers"}},{"name":"checkMemberPermissions","description":"Method for checking member permissions on the server","params":[{"name":"permissionsArray","description":"Array with permissions to check","type":[[["Array","<"],["String",">"]]]},{"name":"member","description":"Guild Member","type":[[["GuildMember"]]]}],"returns":{"types":[[["Boolean"]]],"description":"Boolean value that will indicate the presence/absence of permissions"},"meta":{"line":108,"file":"UtilsManager.js","path":"src/managers"}}],"meta":{"line":19,"file":"UtilsManager.js","path":"src/managers"}},{"name":"WarnManager","construct":{"name":"WarnManager","params":[{"name":"client","description":"Discord Client","type":[[["Client"]]]},{"name":"options","description":"Moderator Options","type":[[["Object"]]]},{"name":"options.muteManager","description":"MuteManager Status","type":[[["Boolean"]]]},{"name":"options.warnManager","description":"WarnManager Status","type":[[["Boolean"]]]},{"name":"options.muteConfig","description":"MuteManager Configuration","type":[[["Object"]]]},{"name":"options.muteConfig.tableName","description":"Table Name For MuteManager","type":[[["String"]]]},{"name":"options.muteConfig.checkCountdown","description":"Mutes Check Interval","type":[[["Number"]]]},{"name":"options.warnConfig","description":"WarnManager Configuration","type":[[["Object"]]]},{"name":"options.warnConfig.tableName","description":"Table Name For WarnManager","type":[[["String"]]]},{"name":"options.warnConfig.maxWarns","description":"Maximum number of warns for punishment","type":[[["Number"]]]},{"name":"options.warnConfig.punishment","description":"User punishment type","type":[[["String"]]]},{"name":"options.warnConfig.muteTime","description":"Mute time when reaching the warnings limit","type":[[["String"]]]}]},"props":[{"name":"methods","description":"Manager Methods","type":[[["Array","<"],["String",">"]]],"meta":{"line":35,"file":"WarnManager.js","path":"src/managers"}},{"name":"size","description":"Manager Methods Count","type":[[["Number"]]],"meta":{"line":41,"file":"WarnManager.js","path":"src/managers"}}],"methods":[{"name":"add","description":"Method for adding warns to user","params":[{"name":"member","description":"Guild Member","type":[[["GuildMember"]]]},{"name":"channel","description":"Guild Channel","type":[[["TextChannel"]]]},{"name":"reason","description":"Warning Reason","type":[[["String"]]]},{"name":"authorID","description":"Warn Author ID","type":[[["String"]]]},{"name":"muteRoleID","description":"Mute Role ID","type":[[["String"]]]}],"returns":{"types":[[["Promise","<{"],["status",": "],["Boolean",", "],["data",": "],["Object","}>"]]],"description":"Returns the warning status and warning data"},"meta":{"line":53,"file":"WarnManager.js","path":"src/managers"}},{"name":"get","description":"Method for getting warning information","params":[{"name":"member","description":"Guild Member","type":[[["GuildMember"]]]},{"name":"index","description":"Warn Index","type":[[["Number"]]]}],"returns":{"types":[[["Object"]]],"description":"Returns information about the warning"},"meta":{"line":98,"file":"WarnManager.js","path":"src/managers"}},{"name":"getAll","description":"Method for getting all user warnings","params":[{"name":"member","description":"Guild Member","type":[[["GuildMember"]]]}],"returns":{"types":[[["Promise","<{"],["status",": "],["Boolean",", "],["warns",": "],["Number",", "],["data",": "],["Array","<"],["Object",">}>"]]],"description":"Returns an array with all user warnings"},"meta":{"line":120,"file":"WarnManager.js","path":"src/managers"}},{"name":"remove","description":"Method for removing warnings from a user","params":[{"name":"member","description":"Guild Member","type":[[["GuildMember"]]]}],"returns":{"types":[[["Promise","<{"],["status",": "],["Boolean",", "],["warns",": "],["Number",", "],["data",": "],["Array","<"],["Object",">}>"]]],"description":"Returns the status of deleting warnings, their number and information."},"meta":{"line":163,"file":"WarnManager.js","path":"src/managers"}},{"name":"clearGuild","description":"Method for removing warnings for a specific server","params":[{"name":"guild","description":"Discord Guild","type":[[["Guild"]]]}],"returns":{"types":[[["Boolean"]]],"description":"Removing Status"},"meta":{"line":193,"file":"WarnManager.js","path":"src/managers"}},{"name":"clearAll","description":"Method for removing all warns from the database","returns":{"types":[[["Boolean"]]],"description":"Removing Status"},"meta":{"line":208,"file":"WarnManager.js","path":"src/managers"}}],"meta":{"line":24,"file":"WarnManager.js","path":"src/managers"}}],"interfaces":[],"typedefs":[],"externals":[]}